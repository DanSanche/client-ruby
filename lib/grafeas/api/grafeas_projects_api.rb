=begin
#Grafeas API

#An API to insert and retrieve annotations on cloud artifacts.

OpenAPI spec version: v1alpha1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module Grafeas
  class GrafeasProjectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a new `Project`.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ProtobufEmpty]
    def create_project(body, opts = {})
      data, _status_code, _headers = create_project_with_http_info(body, opts)
      data
    end

    # Creates a new &#x60;Project&#x60;.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProtobufEmpty, Fixnum, Hash)>] ProtobufEmpty data, response status code and response headers
    def create_project_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GrafeasProjectsApi.create_project ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling GrafeasProjectsApi.create_project"
      end
      # resource path
      local_var_path = '/v1alpha1/projects'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProtobufEmpty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GrafeasProjectsApi#create_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes the given `Project` from the system.
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [ProtobufEmpty]
    def delete_project(name, opts = {})
      data, _status_code, _headers = delete_project_with_http_info(name, opts)
      data
    end

    # Deletes the given &#x60;Project&#x60; from the system.
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProtobufEmpty, Fixnum, Hash)>] ProtobufEmpty data, response status code and response headers
    def delete_project_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GrafeasProjectsApi.delete_project ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling GrafeasProjectsApi.delete_project"
      end
      # resource path
      local_var_path = '/v1alpha1/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProtobufEmpty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GrafeasProjectsApi#delete_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the requested `Project`.
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [ApiProject]
    def get_project(name, opts = {})
      data, _status_code, _headers = get_project_with_http_info(name, opts)
      data
    end

    # Returns the requested &#x60;Project&#x60;.
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiProject, Fixnum, Hash)>] ApiProject data, response status code and response headers
    def get_project_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GrafeasProjectsApi.get_project ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling GrafeasProjectsApi.get_project"
      end
      # resource path
      local_var_path = '/v1alpha1/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GrafeasProjectsApi#get_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lists `Projects`
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter expression.
    # @option opts [Integer] :page_size Number of projects to return in the list.
    # @option opts [String] :page_token Token to provide to skip to a particular spot in the list.
    # @return [ApiListProjectsResponse]
    def list_projects(opts = {})
      data, _status_code, _headers = list_projects_with_http_info(opts)
      data
    end

    # Lists &#x60;Projects&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter expression.
    # @option opts [Integer] :page_size Number of projects to return in the list.
    # @option opts [String] :page_token Token to provide to skip to a particular spot in the list.
    # @return [Array<(ApiListProjectsResponse, Fixnum, Hash)>] ApiListProjectsResponse data, response status code and response headers
    def list_projects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GrafeasProjectsApi.list_projects ...'
      end
      # resource path
      local_var_path = '/v1alpha1/projects'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiListProjectsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GrafeasProjectsApi#list_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
