=begin
#Grafeas API

#An API to insert and retrieve annotations on cloud artifacts.

OpenAPI spec version: v1alpha1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module Grafeas
  # Provides a detailed description of a `Note`.
  class ApiNote
    attr_accessor :name

    # A one sentence description of this `Note`.
    attr_accessor :short_description

    # A detailed description of this `Note`.
    attr_accessor :long_description

    # Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.
    attr_accessor :kind

    # A package vulnerability type of note.
    attr_accessor :vulnerability_type

    # Build provenance type for a verifiable build.
    attr_accessor :build_type

    # A note describing a base image.
    attr_accessor :base_image

    # A note describing a package hosted by various package managers.
    attr_accessor :package

    # A note describing something that can be deployed.
    attr_accessor :deployable

    # A note describing a provider/analysis type.
    attr_accessor :discovery

    attr_accessor :related_url

    # Time of expiration for this note, null if note does not expire.
    attr_accessor :expiration_time

    # Output only. The time this note was created. This field can be used as a filter in list requests.
    attr_accessor :create_time

    # Output only. The time this note was last updated. This field can be used as a filter in list requests.
    attr_accessor :update_time

    attr_accessor :operation_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'short_description' => :'short_description',
        :'long_description' => :'long_description',
        :'kind' => :'kind',
        :'vulnerability_type' => :'vulnerability_type',
        :'build_type' => :'build_type',
        :'base_image' => :'base_image',
        :'package' => :'package',
        :'deployable' => :'deployable',
        :'discovery' => :'discovery',
        :'related_url' => :'related_url',
        :'expiration_time' => :'expiration_time',
        :'create_time' => :'create_time',
        :'update_time' => :'update_time',
        :'operation_name' => :'operation_name'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'short_description' => :'String',
        :'long_description' => :'String',
        :'kind' => :'ApiNoteKind',
        :'vulnerability_type' => :'ApiVulnerabilityType',
        :'build_type' => :'ApiBuildType',
        :'base_image' => :'DockerImageBasis',
        :'package' => :'PackageManagerPackage',
        :'deployable' => :'ApiDeployable',
        :'discovery' => :'ApiDiscovery',
        :'related_url' => :'Array<NoteRelatedUrl>',
        :'expiration_time' => :'DateTime',
        :'create_time' => :'DateTime',
        :'update_time' => :'DateTime',
        :'operation_name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'short_description')
        self.short_description = attributes[:'short_description']
      end

      if attributes.has_key?(:'long_description')
        self.long_description = attributes[:'long_description']
      end

      if attributes.has_key?(:'kind')
        self.kind = attributes[:'kind']
      end

      if attributes.has_key?(:'vulnerability_type')
        self.vulnerability_type = attributes[:'vulnerability_type']
      end

      if attributes.has_key?(:'build_type')
        self.build_type = attributes[:'build_type']
      end

      if attributes.has_key?(:'base_image')
        self.base_image = attributes[:'base_image']
      end

      if attributes.has_key?(:'package')
        self.package = attributes[:'package']
      end

      if attributes.has_key?(:'deployable')
        self.deployable = attributes[:'deployable']
      end

      if attributes.has_key?(:'discovery')
        self.discovery = attributes[:'discovery']
      end

      if attributes.has_key?(:'related_url')
        if (value = attributes[:'related_url']).is_a?(Array)
          self.related_url = value
        end
      end

      if attributes.has_key?(:'expiration_time')
        self.expiration_time = attributes[:'expiration_time']
      end

      if attributes.has_key?(:'create_time')
        self.create_time = attributes[:'create_time']
      end

      if attributes.has_key?(:'update_time')
        self.update_time = attributes[:'update_time']
      end

      if attributes.has_key?(:'operation_name')
        self.operation_name = attributes[:'operation_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          short_description == o.short_description &&
          long_description == o.long_description &&
          kind == o.kind &&
          vulnerability_type == o.vulnerability_type &&
          build_type == o.build_type &&
          base_image == o.base_image &&
          package == o.package &&
          deployable == o.deployable &&
          discovery == o.discovery &&
          related_url == o.related_url &&
          expiration_time == o.expiration_time &&
          create_time == o.create_time &&
          update_time == o.update_time &&
          operation_name == o.operation_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, short_description, long_description, kind, vulnerability_type, build_type, base_image, package, deployable, discovery, related_url, expiration_time, create_time, update_time, operation_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Grafeas.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
