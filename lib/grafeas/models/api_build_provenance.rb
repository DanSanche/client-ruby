=begin
#Grafeas API

#An API to insert and retrieve annotations on cloud artifacts.

OpenAPI spec version: v1alpha1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module Grafeas
  # Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
  class ApiBuildProvenance
    # Unique identifier of the build.
    attr_accessor :id

    # ID of the project.
    attr_accessor :project_id

    # Commands requested by the build.
    attr_accessor :commands

    # Output of the build.
    attr_accessor :built_artifacts

    # Time at which the build was created.
    attr_accessor :create_time

    # Time at which execution of the build was started.
    attr_accessor :start_time

    # Time at which execution of the build was finished.
    attr_accessor :finish_time

    # E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
    attr_accessor :creator

    # Google Cloud Storage bucket where logs were written.
    attr_accessor :logs_bucket

    # Details of the Source input to the build.
    attr_accessor :source_provenance

    # Trigger identifier if the build was triggered automatically; empty if not.
    attr_accessor :trigger_id

    # Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
    attr_accessor :build_options

    # Version string of the builder at the time this build was executed.
    attr_accessor :builder_version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'project_id' => :'project_id',
        :'commands' => :'commands',
        :'built_artifacts' => :'built_artifacts',
        :'create_time' => :'create_time',
        :'start_time' => :'start_time',
        :'finish_time' => :'finish_time',
        :'creator' => :'creator',
        :'logs_bucket' => :'logs_bucket',
        :'source_provenance' => :'source_provenance',
        :'trigger_id' => :'trigger_id',
        :'build_options' => :'build_options',
        :'builder_version' => :'builder_version'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'project_id' => :'String',
        :'commands' => :'Array<ApiCommand>',
        :'built_artifacts' => :'Array<ApiArtifact>',
        :'create_time' => :'DateTime',
        :'start_time' => :'DateTime',
        :'finish_time' => :'DateTime',
        :'creator' => :'String',
        :'logs_bucket' => :'String',
        :'source_provenance' => :'ApiSource',
        :'trigger_id' => :'String',
        :'build_options' => :'Hash<String, String>',
        :'builder_version' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'project_id')
        self.project_id = attributes[:'project_id']
      end

      if attributes.has_key?(:'commands')
        if (value = attributes[:'commands']).is_a?(Array)
          self.commands = value
        end
      end

      if attributes.has_key?(:'built_artifacts')
        if (value = attributes[:'built_artifacts']).is_a?(Array)
          self.built_artifacts = value
        end
      end

      if attributes.has_key?(:'create_time')
        self.create_time = attributes[:'create_time']
      end

      if attributes.has_key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.has_key?(:'finish_time')
        self.finish_time = attributes[:'finish_time']
      end

      if attributes.has_key?(:'creator')
        self.creator = attributes[:'creator']
      end

      if attributes.has_key?(:'logs_bucket')
        self.logs_bucket = attributes[:'logs_bucket']
      end

      if attributes.has_key?(:'source_provenance')
        self.source_provenance = attributes[:'source_provenance']
      end

      if attributes.has_key?(:'trigger_id')
        self.trigger_id = attributes[:'trigger_id']
      end

      if attributes.has_key?(:'build_options')
        if (value = attributes[:'build_options']).is_a?(Hash)
          self.build_options = value
        end
      end

      if attributes.has_key?(:'builder_version')
        self.builder_version = attributes[:'builder_version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          project_id == o.project_id &&
          commands == o.commands &&
          built_artifacts == o.built_artifacts &&
          create_time == o.create_time &&
          start_time == o.start_time &&
          finish_time == o.finish_time &&
          creator == o.creator &&
          logs_bucket == o.logs_bucket &&
          source_provenance == o.source_provenance &&
          trigger_id == o.trigger_id &&
          build_options == o.build_options &&
          builder_version == o.builder_version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, project_id, commands, built_artifacts, create_time, start_time, finish_time, creator, logs_bucket, source_provenance, trigger_id, build_options, builder_version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Grafeas.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
